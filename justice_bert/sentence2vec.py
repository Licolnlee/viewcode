from extract_feature import BertVector
import numpy as np

bv = BertVector()
doc = ['原公诉机关安徽省亳州市谯城区人民检察院。',
'上诉人（原审被告人)王立强。',
'因涉嫌犯生产、销售假药罪，于2017年9月11日被亳州市公安局取保候审，2019年4月29日被亳州市谯城区人民法院决定逮捕，同年5月10日被执行逮捕。',
'现羁押于亳州市看守所。',
'辩护人宋辉、尹红芳，北京京师（亳州)律师事务所律师。',
'亳州市谯城区人民法院审理亳州市谯城区人民检察院指控原审被告人王立强犯销售假药罪一案，于2019年5月24日作出（2019)皖1602刑初235号刑事判决。',
'王立强不服，提出上诉。',
'本院受理后，依法组成合议庭，于2019年10月31日公开开庭审理了本案。',
'亳州市人民检察院指派检察员王某1、张某出庭履行职务，上诉人王立强及其辩护人宋辉、尹红芳到庭参加诉讼。',
'现已审理终结。',
'原判认定，刘某1让黄守道（已判刑)帮忙购买野菊花，黄守道联系了被告人王立强。',
'王立强明知黄守道将大籽蒿冒充野菊花销售给他人，仍于2015年12月29日以每公斤10元的价格向黄守道销售大籽蒿15.3吨。',
'同日，黄守道将该批大籽蒿以野菊花的名义（黄守道加价为每公斤13.5元)用货车送至刘某1处。',
'经鉴定，该批野菊花为假药。',
'原判依据接受案件登记表、立案决定书，现场勘验笔录，亳州市食品药品检验报告书及解读，抓获经过，户籍资料，黄守道、王立强银行流水，黄守道通话记录，视听资料，被害人刘某1陈述，证人刘某1、刘某2、袁某、王某2、刘某3、洪某、胡某、何某等人的证言，同案人黄守道供述及被告人王立强的供述认定上述事实。',
'据此认为，被告人王立强的行为已构成销售假药罪，遂依照《中华人民共和国刑法》第一百四十一条、第二十五条、第六十四条的规定，以被告人王立强犯销售假药罪，判处有期徒刑一年六个月，并处罚金人民币三十一万元；查获的药材由查获单位依法处置，违法所得予以追缴。',
'王立强上诉称，其不知道黄守道要将大籽蒿冒充野菊花出售给他人。',
'本院审理期间，其自愿认罪认罚，请求从轻处罚。',
'其辩护人提出，王立强是从犯，且自愿认罪，请求法院从轻处罚。',
'出庭检察员意见，原判认定事实清楚，证据确实、充分，定罪准确，鉴于二审期间王立强具结悔过，认罪认罚，建议在有期徒刑一年至一年三个月、罚金五万元至十万元区间对王立强判处刑罚。',
'经审理查明，认定上诉人王立强犯销售假药罪的事实，一审法院在判决书中已列举相关证据予以证明，所列证据业经庭审举证、质证。本院审理期间，上诉人及其辩护人均未提出影响本案事实认定的新证据。',
'本院经依法全面审查，对一审判决所列证据和认定的事实予以确认。',
'另查明，二审期间，上诉人王立强主动具结悔过，自愿认罪认罚，经法庭依法调查核实确系其真实意愿。',
'本院认为，上诉人王立强明知他人销售假药仍提供原料，其行为已构成销售假药罪，且有其他严重情节，依法应予严惩。',
'鉴于王立强在黄守道销售假药过程中起辅助作用，系从犯，且自愿认罪认罚，依法对其减轻处罚，对辩护人相关辩护意见予以采纳。',
'综上，原判认定事实清楚，证据确实、充分，定罪准确。审判程序合法。',
'根据上诉人王立强的犯罪事实、性质、情节及对于社会的危害程度，依照《中华人民共和国刑法》第一百四十一条、第二十五条第一款、第二十七条、第六十四条，《中华人民共和国刑事诉讼法》第十五条、第二百三十六条第一款第（二)项的规定，判决如下：',
'一、撤销亳州市谯城区人民法院（2019)皖1602刑初235号刑事判决；',
'二、上诉人王立强犯销售假药罪，判处有期徒刑一年，并处罚金人民币八万元；',
'（刑期从判决执行之日起计算。判决执行以前先行羁押的，羁押一日折抵刑期一日，即自2019年5月10日起至2020年5月9日止。罚金于本判决生效之日起十日内缴纳。)',
'三、查获的假冒药材由查获单位依法处置，违法所得予以追缴。',
'本判决为终审判决。']
# doc.append('张三的行为已构成伪造、出售伪造的增值税专用发票罪。')
# doc.append('张三犯伪造、出售伪造的增值税专用发票罪被判有期徒刑。')

vec = bv.encode(doc)
dem = vec.shape[0]
scores = []
def sim(v1, v2):
    return np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))
for i in range(0, dem):
    tmp = []
    for j in range(0, dem):
        s = sim(vec[i], vec[j])
        if i == j:
            s = 0
        tmp.append(s)
    scores.append(tmp)
min_sim = min(map(min, scores))
max_sim = max(map(max, scores))
minus_sim_norm = min_sim + 0.3 * (max_sim - min_sim)
print(min_sim, max_sim, minus_sim_norm)
centrality = []
for i in range(0, dem):
    e1 = 0
    e2 = 0
    for j in range(0, dem):
        if j < i:
            e1 = e1 + scores[i][j]
        if j > i:
            e2 = e2 + scores[i][j]
    centrality.append(1 * e1 + 1 * e2)
print(centrality)
a = np.array(centrality)
print(a)
f = a.argsort()[-5:][::-1]
f = sorted(f)
for i in f:
    print(doc[i] + '  Score= ' + str(centrality[i]))

print(np.dot(vec[0], vec[1]))
print(np.multiply(vec[0].T, vec[1]))
